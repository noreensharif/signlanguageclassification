# Import required libraries
import os
import cv2
import numpy as np
from moviepy.editor import VideoFileClip
from IPython.display import display
from tensorflow.keras.models import load_model
from google.colab import drive

# ================================ CONFIGURATION ================================
# Image and sequence settings
IMAGE_HEIGHT, IMAGE_WIDTH = 64, 64
SEQUENCE_LENGTH = 20

# List of classes your model was trained on
CLASSES_LIST = ['fifth', 'first', 'five', 'fourteen']

# Paths
DATASET_PATH = '/content/drive/MyDrive/datasetsign_h264'  # Your original dataset
UPLOAD_PATH = '/content/drive/MyDrive/uploaded_videos'    # Where new videos are uploaded

# ================================ LOAD PRE-TRAINED MODEL ================================
def load_pretrained_model():
    """Load the pre-trained model from Google Drive"""
    # Mount Google Drive
    drive.mount('/content/drive')
    
    # Model file name (update this with your actual model filename)
    model_file_name = 'convlstm_model___Date_Time_2025_07_16__06_06_09___Loss_0.23585064709186554___Accuracy_0.9411764740943909.h5'
    model_path = os.path.join('/content/drive/MyDrive', model_file_name)
    
    # Check if model exists
    if not os.path.exists(model_path):
        raise FileNotFoundError(f"Model file not found at: {model_path}")
    
    # Load the model
    model = load_model(model_path)
    print(f"‚úÖ Successfully loaded model from: {model_path}")
    
    return model

# ================================ PREDICTION FUNCTIONS ================================
def extract_frames(video_file_path):
    """
    Extract frames from video file and preprocess them for prediction
    Returns: numpy array of frames or None if extraction fails
    """
    video_reader = cv2.VideoCapture(video_file_path)
    if not video_reader.isOpened():
        print(f"‚ùå Error: Could not open video {video_file_path}")
        return None

    frames_list = []
    video_frames_count = int(video_reader.get(cv2.CAP_PROP_FRAME_COUNT))
    skip_frames_window = max(int(video_frames_count / SEQUENCE_LENGTH), 1)

    for frame_counter in range(SEQUENCE_LENGTH):
        video_reader.set(cv2.CAP_PROP_POS_FRAMES, frame_counter * skip_frames_window)
        success, frame = video_reader.read()
        if not success:
            print(f"‚ö†Ô∏è Warning: Could not read frame {frame_counter}")
            break

        resized_frame = cv2.resize(frame, (IMAGE_HEIGHT, IMAGE_WIDTH))
        normalized_frame = resized_frame / 255.0
        frames_list.append(normalized_frame)

    video_reader.release()

    if len(frames_list) < SEQUENCE_LENGTH:
        print(f"‚ùå Error: Only got {len(frames_list)} frames (need {SEQUENCE_LENGTH})")
        return None
    
    return np.array(frames_list)

def predict_action(model, video_file_path):
    """
    Make prediction on a single video file using the loaded model
    """
    # Extract frames
    frames = extract_frames(video_file_path)
    if frames is None:
        return None
    
    # Add batch dimension and predict
    frames_batch = np.expand_dims(frames, axis=0)
    predictions = model.predict(frames_batch)[0]
    
    # Get top prediction
    predicted_class_idx = np.argmax(predictions)
    predicted_class = CLASSES_LIST[predicted_class_idx]
    confidence = predictions[predicted_class_idx]
    
    return {
        'file_path': video_file_path,
        'predicted_class': predicted_class,
        'confidence': float(confidence),
        'all_predictions': {class_name: float(prob) for class_name, prob in zip(CLASSES_LIST, predictions)}
    }

# ================================ VIDEO DISPLAY FUNCTIONS ================================
def display_video(video_path):
    """Display video in notebook"""
    try:
        clip = VideoFileClip(video_path, audio=False, target_resolution=(300, None))
        display(clip.ipython_display())
    except Exception as e:
        print(f"‚ö†Ô∏è Error displaying video: {str(e)}")

def get_video_files(folder_path):
    """Get list of video files in a folder"""
    if not os.path.exists(folder_path):
        print(f"‚ö†Ô∏è Folder not found: {folder_path}")
        return []
    
    return sorted([f for f in os.listdir(folder_path)
                   if f.lower().endswith(('.mp4', '.avi', '.mov', '.mkv'))])

# ================================ INTERACTIVE MENU ================================
def interactive_predictor(model):
    """Interactive menu for making predictions"""
    while True:
        print("\n" + "=" * 60)
        print("üé¨ VIDEO PREDICTION MENU")
        print("1. Predict on a video from your dataset")
        print("2. Predict on an uploaded video")
        print("3. Exit")
        
        choice = input("Choose option (1-3): ").strip()
        
        if choice == '1':
            # Predict on dataset videos
            try:
                folders = [f for f in os.listdir(DATASET_PATH)
                          if os.path.isdir(os.path.join(DATASET_PATH, f))]
                
                if not folders:
                    print("‚ùå No class folders found in dataset.")
                    continue
                
                print("\nAvailable classes:")
                for i, folder in enumerate(folders, 1):
                    print(f"{i}. {folder}")
                print(f"{len(folders)+1}. Back")
                
                folder_choice = input(f"Select class (1-{len(folders)+1}): ").strip()
                if folder_choice == str(len(folders)+1):
                    continue
                
                try:
                    selected_folder = folders[int(folder_choice)-1]
                    folder_path = os.path.join(DATASET_PATH, selected_folder)
                    videos = get_video_files(folder_path)
                    
                    if not videos:
                        print(f"‚ùå No videos found in {selected_folder}")
                        continue
                    
                    print(f"\nVideos in {selected_folder}:")
                    for i, video in enumerate(videos, 1):
                        print(f"{i}. {video}")
                    print(f"{len(videos)+1}. Back")
                    
                    video_choice = input(f"Select video (1-{len(videos)+1}): ").strip()
                    if video_choice == str(len(videos)+1):
                        continue
                    
                    selected_video = videos[int(video_choice)-1]
                    video_path = os.path.join(folder_path, selected_video)
                    
                    # Display and predict
                    print(f"\n‚ñ∂Ô∏è Playing: {selected_video}")
                    display_video(video_path)
                    
                    print("\nüîç Running prediction...")
                    result = predict_action(model, video_path)
                    
                    if result:
                        print(f"\nüéØ Prediction Result:")
                        print(f"üìå Video: {os.path.basename(result['file_path'])}")
                        print(f"‚úÖ Predicted Class: {result['predicted_class']}")
                        print(f"üìà Confidence: {result['confidence']:.2%}")
                        print("\nüìä All class probabilities:")
                        for class_name, prob in result['all_predictions'].items():
                            print(f"{class_name}: {prob:.2%}")
                
                except (ValueError, IndexError):
                    print("‚ùå Invalid selection. Please try again.")
            
            except FileNotFoundError:
                print(f"‚ùå Dataset folder not found: {DATASET_PATH}")
        
        elif choice == '2':
            # Predict on uploaded videos
            try:
                videos = get_video_files(UPLOAD_PATH)
                
                if not videos:
                    print(f"‚ùå No videos found in {UPLOAD_PATH}")
                    continue
                
                print("\nAvailable videos:")
                for i, video in enumerate(videos, 1):
                    print(f"{i}. {video}")
                print(f"{len(videos)+1}. Back")
                
                video_choice = input(f"Select video (1-{len(videos)+1}): ").strip()
                if video_choice == str(len(videos)+1):
                    continue
                
                try:
                    selected_video = videos[int(video_choice)-1]
                    video_path = os.path.join(UPLOAD_PATH, selected_video)
                    
                    # Display and predict
                    print(f"\n‚ñ∂Ô∏è Playing: {selected_video}")
                    display_video(video_path)
                    
                    print("\nüîç Running prediction...")
                    result = predict_action(model, video_path)
                    
                    if result:
                        print(f"\nüéØ Prediction Result:")
                        print(f"üìå Video: {os.path.basename(result['file_path'])}")
                        print(f"‚úÖ Predicted Class: {result['predicted_class']}")
                        print(f"üìà Confidence: {result['confidence']:.2%}")
                        print("\nüìä All class probabilities:")
                        for class_name, prob in result['all_predictions'].items():
                            print(f"{class_name}: {prob:.2%}")
                
                except (ValueError, IndexError):
                    print("‚ùå Invalid selection. Please try again.")
            
            except FileNotFoundError:
                print(f"‚ùå Upload folder not found: {UPLOAD_PATH}")
        
        elif choice == '3':
            print("üëã Exiting program.")
            break
        
        else:
            print("‚ùå Invalid option. Please choose 1, 2, or 3.")

# ================================ MAIN EXECUTION ================================
if __name__ == "__main__":
    # Load the pre-trained model
    try:
        convlstm_model = load_pretrained_model()
        print("üöÄ Model loaded successfully! Ready for predictions.")
        
        # Start interactive predictor
        interactive_predictor(convlstm_model)
    
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        print("Please check:")
        print("- Google Drive is properly mounted")
        print("- Model file exists at the specified path")
        print("- You have correct permissions")